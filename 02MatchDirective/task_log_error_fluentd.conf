# 2. 로그 저장 및 패턴 매칭 (Match Directive)
## 
## 과제 : 서버 타입과 관계 없이 Error 로그의 경우 별도의 Error 로그 테이블에 저장 되도록
####      이때 테이블에는 서버 타입과 id 필드가 포함되어야 하고, gateway 서버의 경우 server_id가 1이 되도록

<source>
  @type tail
  tag file.*
  path /log/game/*, /log/gateway/*
  <parse>
    @type /^\[(?<logtime>[^\]]*)\] (?<type>[^ ]*) (?<msg>.*)$/
    time_key logtime
    time_format %Y-%m-%d %H:%M:%S %z
  </parse>
</source>
<filter file.log.game.**>
  @type record_transformer
  <record>
    server_id ${tag_parts[3]}
    server_type ${tag_parts[2]}
  </record>
</filter>
<filter file.log.gateway.**>
  @type record_transformer
  <record>
    server_id 1
    server_type ${tag_parts[2]}
  </record>
</filter>
<match file.**> ##
  @type rewrite_tag_filter ## rewrite_tag_filter plugin : 태그를 변경하여 다시 처리 프로세스를 타게할 때 사용
  remove_tag_prefix file ## 태그의 prefix(접두사)를 제거 ex. file.log라면, log만 남게 됨
  <rule> ## rule : 태그 변경하는 규칙 -> 만약 type이 error인 경우, 태그를 error로 변경해라.
    key type                ### type 필드를 보고
    pattern /^(?i)ERROR$/   ### ERROR라는 패턴이 있는 경우 (i : 대소문자 구분 없이 매칭)
    tag error               ### 태그를 error로 변경
  </rule>
  <rule> ## 만약 type이 error가 아닌 경우, 기존 태그를 그대로 사용.
    key type
    pattern /^(?i)ERROR$/
    invert true             ### 패턴에 매칭되지 않는 경우 규칙을 사용
    tag ${tag}              ### 기존 태그를 사용 (${tag}는 현재 레코드의 태그를 의미 = file 접두사가 제거된 태그)
  </rule>
</match>
<match error> ## error 태그에 대한 처리
  @type sql
  host 127.0.0.1
  port 3306
  database log
  adapter mysql2
  username root
  password changeme
  <table>
    table error_logs
    column_mapping 'time:created_at, server_type:server_type, server_id:server_id, msg:msg'
  </table>
</match>