# 3. 로그 가공 ( Filter Directive )
## 
## 필드 값에 따라 로그를 걸러내는 방법 
### (02MatchDirective/sample_match_loglevel_fluentd.conf와 같은 효과, 더 간단함.)
## 주의) filter와 match는 모두 위에서 아래로 순차적으로 처리가 된다.

<source>
  @type tail
  tag file.*
  path /log/game/*, /log/gateway/*
  <parse>
    @type /^\[(?<logtime>[^\]]*)\] (?<type>[^ ]*) (?<msg>.*)$/
    time_key logtime
    time_format %Y-%m-%d %H:%M:%S %z
  </parse>
</source>
<filter file.log.game.**>
  @type record_transformer
  enable_ruby
  <record>
    server_id ${tag_parts[3]}
    type ${record["type"].gsub('[', '').gsub(']', '')}
  </record>
</filter>
<filter file.log.gateway.**>
  @type record_transformer
  enable_ruby
  <record>
    type ${record["type"].gsub('[', '').gsub(']', '')}
  </record>
</filter>
<filter **> ## 순서에 유의해야 함. (위에서 아래로 처리되기 때문에 [] 제외하는 가공 처리 이후에 위치해야 함.)
  @type grep
  <exclude> ## 주어진 조건에 맞는 레코드를 제외(filter out 하는 역할)
    key type
    pattern /^(?i)DEBUG$/ ## ^ : 시작, (?i) : 대소문자 구분 없이, $ : 끝
  </exclude>
</filter>
<match file.log.game.**>
  @type sql
  host 127.0.0.1
  port 3306
  database log
  adapter mysql2
  username root
  password changeme
  <table>
    table game_server
    column_mapping 'time:created_at, server_id:server_id, type:log_type, msg:msg'
  </table>
</match>
<match file.log.gateway.**>
  @type sql
  host 127.0.0.1
  port 3306
  database log
  adapter mysql2
  username root
  password changeme
  <table>
    table gateway_server
    column_mapping 'time:created_at, type:log_type, msg:msg'
  </table>
</match>