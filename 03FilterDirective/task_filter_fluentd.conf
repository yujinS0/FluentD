# 03. 로그 가공 ( Filter Directive ) 과제
##
## 로그 필드들의 순서가 뒤바뀐 로그 파일을 정상적으로 처리하는 설정 파일을 만드시오.
## Input parser에서 각 필드를 추출하는 것이 아니라
## input parser에서는 msg 필드 하나만 추출하고, 각 필드는 record_transformer를 통해 msg에서 추출하는 방식으로 진행!
<source>
  @type tail
  tag file.* # tag 설정 (로그 파일의 경로를 tag로 변환해서 자동으로 추가해주는 기능) ex. log/game에 위치하는 1.log 파일의 태그는 file.log.game.1.log
  path /log/game/*, /log/gateway/*
  <parse>
    @type none  # 파싱 없이 전체 로그를 message 필드로 처리
  </parse>
</source>

<filter file.log.game.**>
  @type record_transformer # record_transformer 플러그인 : 새로운 필드를 추가하거나, 기존 필드 값 변경 기능
  <record>
    server_id ${tag_parts[3]} # tag의 4번째 부분(태그는 . 으로 구분), 서버 id를 server_id라는 필드로 추가하고 있다.
  </record>
</filter>

<filter file.log.**>
  @type record_transformer
  enable_ruby  # Ruby 표현식을 사용해 필드를 처리할 수 있게 함
  <record>
    # logtime 추출 - 로그의 시간 정보 추출 (대괄호 [] 또는 괄호 () 안의 날짜 포맷)
    created_at ${record["message"] =~ /^\[(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2} [+\-]\d{4})\]/ ? $1 : (record["msg"] =~ /\((\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2} [+\-]\d{4})\)/ ? $1 : nil)}

    # type 추출 - [] 또는 () 안의 로그 타입 추출 (WARN, ERROR 등)
    log_type ${record["message"] =~ /^\[\w+\] \((\w+)\)/ ? $1 : (record["message"] =~ /^\[(\w+)\]/ ? $1.gsub(/\[|\]/, '') : (record["message"] =~ /\] (\w+) / ? $1 : "UNKNOWN"))}

    # msg 추출 - 로그 메시지 부분 추출
    msg ${record["message"] =~ /\] (.+)$/ ? $1 : (record["message"] =~ /\) (.+)$/ ? $1 : nil)}
  </record>
</filter>

<match file.log.game.**> # file.log.game으로 시작하는 모든 tag에 적용
  @type sql
  host 127.0.0.1
  port 3306
  database log
  adapter mysql2
  username root
  password 000930
  <table>
    table game_server
    column_mapping 'time:created_at, server_id:server_id, log_type:log_type, msg:msg'
  </table>
</match>
<match file.log.gateway.**> # file.log.gateway로 시작하는 모든 tag에 적용
  @type sql
  host 127.0.0.1
  port 3306
  database log
  adapter mysql2
  username root
  password 000930
  <table>
    table gateway_server
    column_mapping 'time:created_at, log_type:log_type, msg:msg'
  </table>
</match>