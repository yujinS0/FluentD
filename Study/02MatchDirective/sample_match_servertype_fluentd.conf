# 2. 로그 저장 및 패턴 매칭 (Match Directive)
##
## 서버 종류 별로 로그를 따로 관리하기 위해 별로의 테이블에 저장하는 예제
## - 태그 패턴 매칭
## - 로그 데이터에 새로운 필드 추가 (record_transformer 플러그인)
### Filter record_transformer : 새로운 필드를 추가하거나, 기존 필드 값 변경 시 사용
<source>
  @type tail
  tag file.* # tag 설정 (로그 파일의 경로를 tag로 변환해서 자동으로 추가해주는 기능) ex. log/game에 위치하는 1.log 파일의 태그는 file.log.game.1.log
  path /log/game/*, /log/gateway/*
  <parse>
    @type /^\[(?<logtime>[^\]]*)\] (?<type>[^ ]*) (?<msg>.*)$/
    time_key logtime
    time_format %Y-%m-%d %H:%M:%S %z
  </parse>
</source>
<filter file.log.game.**>
  @type record_transformer # record_transformer 플러그인 : 새로운 필드를 추가하거나, 기존 필드 값 변경 기능
  <record>
    server_id ${tag_parts[3]} # tag의 4번째 부분(태그는 . 으로 구분), 서버 id를 server_id라는 필드로 추가하고 있다.
  </record>
</filter>
<match file.log.game.**> # file.log.game으로 시작하는 모든 tag에 적용
  @type sql
  host 127.0.0.1
  port 3306
  database log
  adapter mysql2
  username root
  password changeme
  <table>
    table game_server
    column_mapping 'time:created_at, server_id:server_id, type:log_type, msg:msg' # 필드 매핑 (filter에서 만든 server_id 필드도 column에 매핑해주고 있다.
  </table>
</match>
<match file.log.gateway.**> # file.log.gateway로 시작하는 모든 tag에 적용
  @type sql
  host 127.0.0.1
  port 3306
  database log
  adapter mysql2
  username root
  password changeme
  <table>
    table gateway_server
    column_mapping 'time:created_at, type:log_type, msg:msg'
  </table>
</match>